round(transmort(0.999968, 0.002),6)),
c(round(transmort(0.99, 0.005),3),
round(transmort(0.999968, 0.005),6)),
c(round(transmort(0.99, 0.0125),3),
round(transmort(0.999968, 0.0125),6)))
rownames(mat) <- c("p=0.99", "p=0.999968")
colnames(mat) <- c("eps=0.002", 0.005, 0.0125)
mat
par(mfrow=c(1,4))
logit <- make.link("logit")$linkfun
invPower <- function(u, lambda)(lambda*u+1)^(1/lambda)
modXRep.lm <- lm(logit(transmort(PropDead,0.002))~0+trtGpRep/cTime, data=HawCon)
plot(modXRep.lm, pty="s", sub.caption="", lwd=3, cex.lab=1.1,
cex.caption=1.1)
par(mfrow=c(1,4))
modXRep.lm <- lm(logit(transmort(PropDead,0.015))~0+trtGpRep/cTime, data=HawCon)
plot(modXRep.lm, pty="s", sub.caption="", lwd=3, cex.lab=1.1,
cex.caption=1.1)
simdat <- simulate(modXRep.lm, nsim=4)
for(i in 1:4){
res <- resid(lm(simdat[[i]]~0+trtGpRep/cTime, data=HawCon))
qqnorm(res, main=paste("Simulation",i))
}
form <- transmort(PropDead,0.002)~0+trtGpRep/cTime
lambda <- car::powerTransform(form, data=HawCon)$lambda
fullform <- car::bcPower(transmort(PropDead,0.002),lambda)~
0+trtGpRep/cTime
modXRepP.lm <- lm(fullform, data=HawCon)
par(mfrow=c(1,4))
plot(modXRepP.lm, pty="s", lwd=3, cex.lab=1.1, cex.caption=1.1,
sub.caption=substitute("Linear model, power function transform, "*
lambda*"="*pwr, list(pwr=lambda)))
browser()
source('~/pkgs/qra/R/graphSum.R', echo=TRUE)
graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
yzeroOneOffsets = c(-0.08, 0.08),
Rep='RepNumber', fitRep=NULL,
fitPanel=NULL,
byFacet=~Species,
maint='Oranges:HawCon, MedFly', xlab='Days')
names(ds)
HawCon$predRep <- predict(modXRep.lm)
graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
yzeroOneOffsets = c(-0.08, 0.08),
Rep='RepNumber', fitRep=NULL,
fitPanel=NULL,
byFacet=~Species,
maint='Oranges:HawCon, MedFly', xlab='Days')
names(ds)
library(ggplot2)
graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
yzeroOneOffsets = c(-0.08, 0.08),
Rep='RepNumber', fitRep=NULL,
fitPanel=NULL,
byFacet=~Species,
maint='Oranges:HawCon, MedFly', xlab='Days')
graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
yzeroOneOffsets = c(-0.08, 0.08),
Rep='RepNumber', fitRep=NULL,
fitPanel=predRep,
byFacet=~Species,
maint='Oranges:HawCon, MedFly', xlab='Days')
graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
yzeroOneOffsets = c(-0.08, 0.08),
Rep='RepNumber', fitRep=NULL,
fitPanel=predRep,
byFacet=~Species,
maint='Oranges:HawCon, MedFly', xlab='Days')
names(ds)
?
h
help
names(ds)
fitPanel
graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
yzeroOneOffsets = c(-0.08, 0.08),
Rep='RepNumber', fitRep=NULL,
fitPanel="predRep",
byFacet=~Species,
maint='Oranges:HawCon, MedFly', xlab='Days')
graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
yzeroOneOffsets = c(-0.08, 0.08),
Rep='RepNumber', fitRep=NULL,
fitPanel="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0,0),
maint='Oranges:HawCon, MedFly', xlab='Days')
graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber', fitRep=NULL,
fitPanel="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0,0),
maint='Oranges:HawCon, MedFly', xlab='Days')
HawCon$predRep <- predict(modXRepP.lm)
graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber', fitRep=NULL,
fitPanel="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0,0),
maint='Oranges:HawCon, MedFly', xlab='Days')
rm(graphSum)
HawCon$predRep <- predict(modXRepP.lm)
qra::graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber', fitRep=NULL,
fitPanel="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0,0),
maint='Oranges:HawCon, MedFly', xlab='Days')
qra::graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber', fitRep=NULL,
fitRep="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0,0),
maint='Oranges:HawCon, MedFly', xlab='Days')
qra::graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber',
fitRep="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0,0),
maint='Oranges:HawCon, MedFly', xlab='Days')
names(HawCon)
plot(fpower(HawCon[['Dead']]/HawCon[['Tot']], 0.827, 0.02),HawCon$predRep)
plot(qra::fpower(HawCon[['Dead']]/HawCon[['Tot']], 0.827, 0.02),HawCon$predRep)
sapply(HawCon,length)
plot(qra::fpower(HawCon[['Dead']]/HawCon[['Total']], 0.827, 0.02),HawCon$predRep)
fullform <- qra::fpower(transmort(PropDead,0.002),lambda)~
0+trtGpRep/cTime
modXRepP.lm <- lm(fullform, data=HawCon)
fullform <- qra::fpower(PropDead,lambda,0.002))~
fullform <- qra::fpower(PropDead,lambda,0.002)~0+trtGpRep/cTime
modXRepP.lm <- lm(fullform, data=HawCon)
HawCon$predRep <- predict(modXRepP.lm)
plot(qra::fpower(HawCon[['Dead']]/HawCon[['Total']], 0.827, 0.02),HawCon$predRep)
HawCon$predRep <- predict(modXRepP.lm)
qra::graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=function(p)qra::fpower(p, 0.827, 0.02),
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber',
fitRep="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0,0),
maint='Oranges:HawCon, MedFly', xlab='Days')
ullform <- I(qra::fpower(PropDead,lambda,0.002))~0+trtGpRep/cTime
modXRepP.lm <- lm(fullform, data=HawCon)
plot(qra::fpower(HawCon[['Dead']]/HawCon[['Total']], 0.827, 0.02),HawCon$predRep)
plot(I(qra::fpower(PropDead,lambda,0.002)),predRep, data=HawCon)
with(HawCon,plot(I(qra::fpower(PropDead,lambda,0.002)),predRep))
with(HawCon,plot(I(qra::fpower(PropDead,lambda,0.002)),
I(qra::fpower(Dead/Total,lambda,0.002))
)
args(qra::fpower)
with(HawCon,plot(qra::fpower(PropDead,lambda,0.002),
qra::fpower(Dead/Total,lambda,0.002))
)
ls()
linkfun <- function(p)qra::fpower(p, 0.827, 0.02)
qra::graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=linkfun,
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber',
fitRep="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0,0),
maint='Oranges:HawCon, MedFly', xlab='Days')
qra::graphSum
z <- qra::fpower(HawCon[['Dead']]/HawCon[['Total']])
z <- qra::fpower(HawCon[['Dead']]/HawCon[['Total']],.827,.02)
range(z)
form <- transmort(PropDead,0.002)~0+trtGpRep/cTime
lambda <- car::powerTransform(form, data=HawCon)$lambda
lambda
z <- qra::fpower(HawCon$PropDead,.827,.02)
range(z)
range(HawCon$PropDead)
qra::fpower
z <- with(HawCon, ((PropDead+0.002)/(1-PropDead+0.002))^0.827)
range(z)
funp <- function(p)qra::fpower(p,.827,.02)
z <- with(HawCon, funp(PropDead))
range(z)
funp
qra::fpower
sign(1)
sign(4)
range(HawCon$PropDead^0.827)
funp2 <- function(p)((p+0.002)/(1-p+002))^0.827
z2 <- with(HawCon, funp2(PropDead))
range(z2)
z3 <- with(HawCon, (PropDead+0.002)/(1-PropDead+0.002)))
z3 <- with(HawCon, (PropDead+0.002)/(1-PropDead+0.002))
range(z3)
range(z3^0.827)
range(z3^lambda)
funp2 <- function(p){((p+0.002)/(1-p+002))^0.827}
z2 <- with(HawCon, funp2(PropDead))
range(z2)
knitr::opts_chunk$set(echo = FALSE, comment=NA)
options(show.signif.stars=FALSE)
HawCon <- as.data.frame(qra::HawCon)
## Change name "CommonName" to "CN", for more compact output.
# CCnum <- match("CommonName", names(HawCon))
# names(HawCon)[CCnum] <- "CN"
# HawCon[['CN']] <- plyr::revalue(HawCon[['CN']],
#                                 c("Mediterranean fruit fly"="MedFly",
#                         "Melon fly"="MelonFly"))
## trtGp will identify species & lifestage combination
## trtGpRep will identify species, lifestage, and rep
## cTime is centered version of TrtTime
## scTime is centered and scaled version of TrtTime,
## needed to get some mixed model fits to converge
HawCon <- within(HawCon, {
trtGp <- paste0(CN,LifestageTrt, sep=":")
trtGpRep <- paste0(CN,LifestageTrt,RepNumber)
cTime <- scale(TrtTime, scale=FALSE)
scTime <- scale(TrtTime)
logitp = log((Dead+1/6)/(Live+1/6))
})
abscale <- qra::getScaleCoef(HawCon$scTime)
pointLab <- 1:nrow(HawCon)
funp2 <- function(p){((p+0.002)/(1-p+002))^0.827}
z2 <- with(HawCon, funp2(PropDead))
range(z2)
funp4 <- function(p){((p+0.002)/(1-p+002))}
z4 <- with(HawCon, funp4(PropDead))
range(z4)
HawCon$PropDead[1]
funp4(HawCon$PropDead[1])
funp4(.125)
.125/(1-.125)
orm <- transmort(PropDead,0.002)~0+trtGpRep/cTime
lambda <- car::powerTransform(form, data=HawCon)$lambda
form <- transmort(PropDead,0.002)~0+trtGpRep/cTime
lambda <- car::powerTransform(form, data=HawCon)$lambda
transmort <- function(p, eps){
(p+eps)/(1+2*eps)
}
backmort <- function(ptrans, eps){
ptrans+eps*(2*ptrans-1)
}
form <- transmort(PropDead,0.002)~0+trtGpRep/cTime
lambda <- car::powerTransform(form, data=HawCon)$lambda
lambda
z <- with(HawCon, qra::fpower(PropDead,lambda,0.002))
range(z)
modXRepP.lm <- lm(fullform, data=HawCon)
fullform <- qra::fpower(PropDead,0.827,0.002))~0+trtGpRep/cTime
fullform <- qra::fpower(PropDead,0.827,0.002)~0+trtGpRep/cTime
modXRepP.lm <- lm(fullform, data=HawCon)
HawCon$predRep <- predict(modXRepP.lm)
linkfun <- function(p)qra::fpower(p, 0.827, 0.002)
qra::graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=linkfun,
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber',
fitRep="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0,0),
maint='Oranges:HawCon, MedFly', xlab='Days')
with(HawCon, plot(linkfun(PropDead),predRep))
qra::graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=linkfun,
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber',
fitRep="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0.002,0.002),
maint='Oranges:HawCon, MedFly', xlab='Days')
funp <- function(p)((p+0.002)/(1-p+0.002))^0.827
qra::graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=funp,
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber',
fitRep="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0,0),
maint='Oranges:HawCon, MedFly', xlab='Days')
with(subset(HawCon, LifestageTrt=="Egg"), PropDead)
with(subset(HawCon, LifestageTrt=="Egg"), funp(PropDead))
HawCon$predRep <- predict(modXRepP.lm)
linkfun <- function(p)qra::fpower(p, 0.827, 0.002)
qra::graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=funp,
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber',
fitRep="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0,0),
maint='Oranges:HawCon, MedFly', xlab='Days')
qra::graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link=funp,
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber',
fitRep="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0.008,0.008),
maint='Oranges:HawCon, MedFly', xlab='Days')
HawCon$predRep <- predict(modXRep.lm)
knitr::opts_chunk$set(echo = FALSE, comment=NA)
options(show.signif.stars=FALSE)
HawCon <- as.data.frame(qra::HawCon)
## Change name "CommonName" to "CN", for more compact output.
# CCnum <- match("CommonName", names(HawCon))
# names(HawCon)[CCnum] <- "CN"
# HawCon[['CN']] <- plyr::revalue(HawCon[['CN']],
#                                 c("Mediterranean fruit fly"="MedFly",
#                         "Melon fly"="MelonFly"))
## trtGp will identify species & lifestage combination
## trtGpRep will identify species, lifestage, and rep
## cTime is centered version of TrtTime
## scTime is centered and scaled version of TrtTime,
## needed to get some mixed model fits to converge
HawCon <- within(HawCon, {
trtGp <- paste0(CN,LifestageTrt, sep=":")
trtGpRep <- paste0(CN,LifestageTrt,RepNumber)
cTime <- scale(TrtTime, scale=FALSE)
scTime <- scale(TrtTime)
logitp = log((Dead+1/6)/(Live+1/6))
})
abscale <- qra::getScaleCoef(HawCon$scTime)
pointLab <- 1:nrow(HawCon)
par(mfrow=c(1,4))
modXRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/TrtTime,
family=quasibinomial(link='logit'), data=subset(HawCon,Dead>0))
plot(modXRep.glm, pty="s", sub.caption="", lwd=3, cex.lab=1.1,
cex.caption=1.1)
par(mfrow=c(1,4))
for(i in 1:3){
p <- predict(modXRep.glm, type='response')
modXRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/TrtTime,
family=quasibinomial(link='logit'),
weights=(p*(1-p))^-0.25, data=subset(HawCon,Dead>0))
}
plot(modXRep.glm, pty="s", sub.caption="", lwd=3, cex.lab=1.1,
cex.caption=1.1)
transmort <- function(p, eps){
(p+eps)/(1+2*eps)
}
backmort <- function(ptrans, eps){
ptrans+eps*(2*ptrans-1)
}
mat <- cbind(c(round(transmort(0.99, 0.002),3),
round(transmort(0.999968, 0.002),6)),
c(round(transmort(0.99, 0.005),3),
round(transmort(0.999968, 0.005),6)),
c(round(transmort(0.99, 0.0125),3),
round(transmort(0.999968, 0.0125),6)))
rownames(mat) <- c("p=0.99", "p=0.999968")
colnames(mat) <- c("eps=0.002", 0.005, 0.0125)
mat
par(mfrow=c(1,4))
logit <- make.link("logit")$linkfun
invPower <- function(u, lambda)(lambda*u+1)^(1/lambda)
modXRep.lm <- lm(logit(transmort(PropDead,0.002))~0+trtGpRep/cTime, data=HawCon)
plot(modXRep.lm, pty="s", sub.caption="", lwd=3, cex.lab=1.1,
cex.caption=1.1)
par(mfrow=c(1,4))
modXRep.lm <- lm(logit(transmort(PropDead,0.015))~0+trtGpRep/cTime, data=HawCon)
plot(modXRep.lm, pty="s", sub.caption="", lwd=3, cex.lab=1.1,
cex.caption=1.1)
simdat <- simulate(modXRep.lm, nsim=4)
for(i in 1:4){
res <- resid(lm(simdat[[i]]~0+trtGpRep/cTime, data=HawCon))
qqnorm(res, main=paste("Simulation",i))
}
form <- transmort(PropDead,0.002)~0+trtGpRep/cTime
lambda <- car::powerTransform(form, data=HawCon)$lambda
fullform <- qra::fpower(PropDead,0.827,0.002)~0+trtGpRep/cTime
modXRepP.lm <- lm(fullform, data=HawCon)
par(mfrow=c(1,4))
plot(modXRepP.lm, pty="s", lwd=3, cex.lab=1.1, cex.caption=1.1,
sub.caption=substitute("Linear model, power function transform, "*
lambda*"="*pwr, list(pwr=lambda)))
HawCon$predRep <- predict(modXRep.lm)
qra::graphSum(HawCon, subSet=expression(LifestageTrt=="Egg"),
link="logit",
logScale=FALSE, dead='Dead', tot='Total',
dosevar='TrtTime', ptSize=3,
Rep='RepNumber',
fitRep="predRep",
byFacet=~Species,
yzeroOneOffsets = c(0.008,0.008),
maint='Oranges:HawCon, MedFly', xlab='Days')
RShowDoc("KEYWORDS")
foldp(c(0.2,0.75))
foldp <-function(p,eps)(p+eps)/(1-p+eps)
foldp(c(0.2,0.75),0)
library(qra)
devtools::document()
library(qra)
summary(modX.lmer)
HawCon <- within(HawCon, {
trtGp <- paste0(CN,LifestageTrt, sep=":")
trtGpRep <- paste0(CN,LifestageTrt,RepNumber)
cTime <- scale(TrtTime, scale=FALSE)
scTime <- scale(TrtTime)
logitp = log((Dead+1/6)/(Live+1/6))
})
abscale <- qra::getScaleCoef(HawCon$scTime)
foldp <- function(p,eps)(p+eps)/(1-p+eps)
logit <- make.link("logit")$linkfun
invPower <- function(u, lambda)(lambda*u+1)^(1/lambda)
modXRep.lm <- lm(logit(transmort(PropDead,0.002))~0+trtGpRep/cTime, data=HawCon)
logit <- make.link("logit")$linkfun
invPower <- function(u, lambda)(lambda*u+1)^(1/lambda)
modXRep.lm <- lm(log(foldp(PropDead,0.002))~0+trtGpRep/cTime, data=HawCon)
modXRep.lmer <- lme4::lmer(log(foldp(PropDead,0.002))~0+trtGpRep/cTime, data=HawCon)
modXRep.lmer <- lme4::lmer(log(foldp(PropDead,0.002))~0+trtGp+(trtGpRep/cTime), data=HawCon)
modXRep.lmer <- lme4::lmer(log(foldp(PropDead,0.002))~0+trtGp+(scTime|trtGpRep), data=HawCon)
summary(modX.lmer)
modX.lmer <- lme4::lmer(log(foldp(PropDead,0.002))~0+trtGp+(scTime|trtGpRep), data=HawCon)
summary(modX.lmer)
names(summary(modX.lmer))
summary(modX.lmer)$ngrps
devtools::document()
library(qra)
?make.link
devtools::document()
library(qra)
devtools::document()
library(qra)
devtools::document()
library(qra)
devtools::document()
library(qra)
devtools::document()
library(qra)
install.packages("~/pkgs/qra_0.1.17.tar.gz", repos = NULL, type = "source")
devtools::document()
install.packages("~/pkgs/qra_0.1.17.tar.gz", repos = NULL, type = "source")
args(qra::fieller)
library(qra)
devtools::document()
library(qra)
install.packages("~/pkgs/qra_0.1.17.tar.gz", repos = NULL, type = "source")
args(qra::fieller)
qra::fieller
qra::fieller2
install.packages("~/pkgs/qra_0.1.18.tar.gz", repos = NULL, type = "source")
devtools::document()
library(qra)
install.packages("~/pkgs/qra_0.1.19.tar.gz", repos = NULL, type = "source")
devtools::document()
install.packages("~/pkgs/qra_0.1.20.tar.gz", repos = NULL, type = "source")
ls()
inherits(modXRep.glm,'lm')
class(modX.rlmer)
library(lme4)
?lmer
fm1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
class(fm1)
?glmer
?glmmTMB::glmmTMB
library(glmmTMB)
m1 <- glmmTMB(count~ mined + (1|site),
zi=~mined,
family=poisson, data=Salamanders)
class(m1)
varfun <- function(x)vcov(x)[["cond"]]
varfun(m1)
devtools::document()
library(qra)
devtools::install_github('jhmaindonald/qra')
ls()
names(modX.glm)
modX.glm$df.residual
modX.glm$df.null
library(qra)
devtools::document()
devtools::install_github('jhmaindonald/qra')
