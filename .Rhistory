zcll <-
glmmTMB(sim[[i]] ~ 0 + trtGp/scTime +
(1|obs) + (1|trtGpRep),
family=binomial(link='cloglog'),
data=HawCon)
aic.cll[i] <- AIC(zcll)
zlogit2 <-
glmmTMB(simcll[[i]] ~ 0 + trtGp/scTime +
(1|obs) + (1|trtGpRep),
family=binomial(link='logit'),
data=HawCon)
aic2.logit[i] <- AIC(zlogit2)
zcll2 <-
glmmTMB(simcll[[i]] ~ 0 + trtGp/scTime +
(1|obs) + (1|trtGpRep),
family=binomial(link='cloglog'),
data=HawCon)
aic2.cll[i] <- AIC(zcll2)
}
gph1 <- xyplot(aic.cll~aic.logit,
key=list(text=list(c("logit model","cll model", "Data")),
points=list(pch=c(1,1,2),
col=c('blue','red','black')),columns=3))
gph2 <- xyplot(aic2.cll~aic2.logit, col='red')
gph3 <- gph1+latticeExtra::as.layer(gph2)+
latticeExtra::layer(panel.abline(0,1),
panel.points(aicData[['logit']],
aicData[['cll']], pch=2, cex=2, col=1))
update(gph3, xlim=range(c(aic.logit, aic2.logit,
aicData['logit']))*c(.98,1.02),
ylim=range(c(aic.cll, aic2.cll,
aicData['cll']))*c(.98,1.02))
cap5 <- "Diagnostics for model with binomial errors and observation level
random effects."
set.seed(29)
simRefcll <- suppressWarnings(
simulateResiduals(HCBIobs.cll, n=250, seed=FALSE) )
plotResiduals(simRefcll, xlab='cll: model prediction')
plotResiduals(simRefcll, form=log(HawCon$Total),
xlab="cll: log(Total)")
simReflogit <- suppressWarnings(
simulateResiduals(HCBIobs.logit, n=250, seed=FALSE) )
plotResiduals(simReflogit, xlab='logit: model prediction')
plotResiduals(simReflogit, form=log(HawCon$Total),
xlab="logit: log(Total)")
shorten <- function(nam, leaveout=c('trtGp','Fly',':')){
for(txt in leaveout){
nam <- gsub(txt,'', nam, fixed=TRUE)
}
nam
}
## Fit two simplistic and unsatisfactory models.
HCbbDisp1.cll <- update(HCbb.cll, dispformula=~1)
HCbin.cll <- update(HCbb.cll, family=binomial(link="cloglog"))
LTbb.cll <- qra::extractLT(p=0.99, obj=HCbb.cll, link="cloglog",
a=1:8, b=9:16, eps=0, df.t=NULL)[,-2]
rownames(LTbb.cll) <- shorten(rownames(LTbb.cll))
LTBIobs.cll <- qra::extractLT(p=0.99, obj=HCBIobs.cll,
a=1:8, b=9:16, eps=0, offset=0,
df.t=NULL)[,-2]
rownames(LTBIobs.cll) <- shorten(rownames(LTBIobs.cll))
LTbb.logit <- qra::extractLT(p=0.99, obj=HCbb.logit, link="logit",
a=1:8, b=9:16, eps=0, offset=0,
df.t=NULL)[,-2]
rownames(LTbb.logit) <- shorten(rownames(LTbb.logit))
LTbbDisp1.cll <-
qra::extractLT(p=0.99, obj=HCbbDisp1.cll,
a=1:8, b=9:16, eps=0, df.t=NULL)[,-2]
rownames(LTbbDisp1.cll) <- shorten(rownames(LTbbDisp1.cll))
LTbin.cll <-
qra::extractLT(p=0.99, obj=HCbin.cll,
a=1:8, b=9:16, eps=0, df.t=NULL)[,-2]
rownames(LTbin.cll) <- shorten(rownames(LTbin.cll))
cap9 <- "LT99 $95\\%$ confidence intervals are compared between
five different models."
gpNam <- rownames(LTbb.cll)
ordEst <- order(LTbb.cll[,1])
library(plotrix)
col5 <- c("blue","lightslateblue","brown",'gray','gray50')
plotCI(1:8-0.36, y=LTbb.cll[ordEst,1], ui=LTbb.cll[ordEst,3],
li=LTbbcll[ordEst,2], lwd=2, col=col5[1], xaxt="n",
fg="gray", xlab="", ylab="LT99 Estimate (days)",
xlim=c(0.8,8.2), ylim=c(0,29))
plotCI(1:8-0.18, y=LTBIobs.cll[ordEst,1], ui=LTBIobs.cll[ordEst,3],
li=LTBIobscll[ordEst,2], lwd=2, col=col5[2], xaxt="n",
fg="gray", xlab="", ylab="LT99 Estimate (days)",
xlim=c(0.8,8.2), ylim=c(0,29))
plotCI(1:8, y=LTbb.logit[ordEst,1], ui=LTbb.logit[ordEst,3],
li=LTbb.logit[ordEst,2], lwd=2, col=col5[3], xaxt="n", add=TRUE)
plotCI(1:8+0.18, y=LTbbDisp1.cll[ordEst,1], ui=LTbbDisp1.cll[ordEst,3],
li=LTbbDisp1.cll[ordEst,2], lwd=2, col=col5[4], xaxt="n", add=TRUE)
plotCI(1:8+0.36, y=LTbin.cll[ordEst,1], ui=LTbin.cll[ordEst,3],
li=LTbin.cll[ordEst,2], lwd=2, col=col5[5], xaxt="n", add=TRUE)
axis(1, at=1:8, labels=gpNam[ordEst], las=2, lwd=0,
lwd.ticks=0.5, col.ticks="gray")
legend("topleft", legend=c("BB-cll (cll=cloglog)",  "BB-cll-ObsRE", "BB-logit",
"BB-cll, const Disp factor",
"Binomial-cll"),
inset=c(0.01,0.01), lty=c(1,1), col=col5[1:5],
text.col=col5[1:5], bty="n",y.intersp=0.85)
plotCI(1:8-0.36, y=LTbb.cll[ordEst,1], ui=LTbb.cll[ordEst,3],
li=LTbbcll[ordEst,2], lwd=2, col=col5[1], xaxt="n",
fg="gray", xlab="", ylab="LT99 Estimate (days)",
xlim=c(0.8,8.2), ylim=c(0,29))
plotCI(1:8-0.18, y=LTBIobs.cll[ordEst,1], ui=LTBIobs.cll[ordEst,3],
li=LTBIobscll[ordEst,2], lwd=2, col=col5[2], xaxt="n",
fg="gray", xlab="", ylab="LT99 Estimate (days)",
xlim=c(0.8,8.2), ylim=c(0,29), add=TRUE)
plotCI(1:8, y=LTbb.logit[ordEst,1], ui=LTbb.logit[ordEst,3],
li=LTbb.logit[ordEst,2], lwd=2, col=col5[3], xaxt="n", add=TRUE)
plotCI(1:8+0.18, y=LTbbDisp1.cll[ordEst,1], ui=LTbbDisp1.cll[ordEst,3],
li=LTbbDisp1.cll[ordEst,2], lwd=2, col=col5[4], xaxt="n", add=TRUE)
plotCI(1:8+0.36, y=LTbin.cll[ordEst,1], ui=LTbin.cll[ordEst,3],
li=LTbin.cll[ordEst,2], lwd=2, col=col5[5], xaxt="n", add=TRUE)
axis(1, at=1:8, labels=gpNam[ordEst], las=2, lwd=0,
lwd.ticks=0.5, col.ticks="gray")
legend("topleft", legend=c("BB-cll (cll=cloglog)",  "BB-cll-ObsRE", "BB-logit",
"BB-cll, const Disp factor",
"Binomial-cll"),
inset=c(0.01,0.01), lty=c(1,1), col=col5[1:5],
text.col=col5[1:5], bty="n",y.intersp=0.85)
plotCI(1:8-0.36, y=LTbb.cll[ordEst,1], ui=LTbb.cll[ordEst,3],
li=LTbb.cll[ordEst,2], lwd=2, col=col5[1], xaxt="n",
fg="gray", xlab="", ylab="LT99 Estimate (days)",
xlim=c(0.8,8.2), ylim=c(0,29))
plotCI(1:8-0.18, y=LTBIobs.cll[ordEst,1], ui=LTBIobs.cll[ordEst,3],
li=LTBIobs.cll[ordEst,2], lwd=2, col=col5[2], xaxt="n",
fg="gray", xlab="", ylab="LT99 Estimate (days)",
xlim=c(0.8,8.2), ylim=c(0,29), add=TRUE)
plotCI(1:8, y=LTbb.logit[ordEst,1], ui=LTbb.logit[ordEst,3],
li=LTbb.logit[ordEst,2], lwd=2, col=col5[3], xaxt="n", add=TRUE)
plotCI(1:8+0.18, y=LTbbDisp1.cll[ordEst,1], ui=LTbbDisp1.cll[ordEst,3],
li=LTbbDisp1.cll[ordEst,2], lwd=2, col=col5[4], xaxt="n", add=TRUE)
plotCI(1:8+0.36, y=LTbin.cll[ordEst,1], ui=LTbin.cll[ordEst,3],
li=LTbin.cll[ordEst,2], lwd=2, col=col5[5], xaxt="n", add=TRUE)
axis(1, at=1:8, labels=gpNam[ordEst], las=2, lwd=0,
lwd.ticks=0.5, col.ticks="gray")
legend("topleft", legend=c("BB-cll (cll=cloglog)",  "BB-cll-ObsRE", "BB-logit",
"BB-cll, const Disp factor",
"Binomial-cll"),
inset=c(0.01,0.01), lty=c(1,1), col=col5[1:5],
text.col=col5[1:5], bty="n",y.intersp=0.85)
offset <- with(attributes(HawCon$scTime),
c(`scaled:center`, `scaled:scale`))
LTBIobs.cll <- qra::extractLT(p=0.99, obj=HCBIobs.cll,
a=1:8, b=9:16, eps=0, offset=offset,
df.t=NULL)[,-2]
rownames(LTBIobs.cll) <- shorten(rownames(LTBIobs.cll))
gpNam <- rownames(LTbb.cll)
ordEst <- order(LTbb.cll[,1])
library(plotrix)
col5 <- c("blue","lightslateblue","brown",'gray','gray50')
plotCI(1:8-0.36, y=LTbb.cll[ordEst,1], ui=LTbb.cll[ordEst,3],
li=LTbb.cll[ordEst,2], lwd=2, col=col5[1], xaxt="n",
fg="gray", xlab="", ylab="LT99 Estimate (days)",
xlim=c(0.8,8.2), ylim=c(0,29))
plotCI(1:8-0.18, y=LTBIobs.cll[ordEst,1], ui=LTBIobs.cll[ordEst,3],
li=LTBIobs.cll[ordEst,2], lwd=2, col=col5[2], xaxt="n",
fg="gray", xlab="", ylab="LT99 Estimate (days)",
xlim=c(0.8,8.2), ylim=c(0,29), add=TRUE)
plotCI(1:8, y=LTbb.logit[ordEst,1], ui=LTbb.logit[ordEst,3],
li=LTbb.logit[ordEst,2], lwd=2, col=col5[3], xaxt="n", add=TRUE)
plotCI(1:8+0.18, y=LTbbDisp1.cll[ordEst,1], ui=LTbbDisp1.cll[ordEst,3],
li=LTbbDisp1.cll[ordEst,2], lwd=2, col=col5[4], xaxt="n", add=TRUE)
plotCI(1:8+0.36, y=LTbin.cll[ordEst,1], ui=LTbin.cll[ordEst,3],
li=LTbin.cll[ordEst,2], lwd=2, col=col5[5], xaxt="n", add=TRUE)
axis(1, at=1:8, labels=gpNam[ordEst], las=2, lwd=0,
lwd.ticks=0.5, col.ticks="gray")
legend("topleft", legend=c("BB-cll (cll=cloglog)",  "BB-cll-ObsRE", "BB-logit",
"BB-cll, const Disp factor",
"Binomial-cll"),
inset=c(0.01,0.01), lty=c(1,1), col=col5[1:5],
text.col=col5[1:5], bty="n",y.intersp=0.85)
?plotCI
gpNam <- rownames(LTbb.cll)
ordEst <- order(LTbb.cll[,1])
library(plotrix)
col5 <- c("blue","lightslateblue","brown",'gray','gray50')
plotCI(1:8-0.34, y=LTbb.cll[ordEst,1], ui=LTbb.cll[ordEst,3],
li=LTbb.cll[ordEst,2], lwd=2, col=col5[1], xaxt="n",
fg="gray", xlab="", ylab="LT99 Estimate (days)",
xlim=c(0.8,8.2), ylim=c(0,29), sfrac=0.008)
plotCI(1:8-0.17, y=LTBIobs.cll[ordEst,1], ui=LTBIobs.cll[ordEst,3],
li=LTBIobs.cll[ordEst,2], lwd=2, col=col5[2], xaxt="n",
fg="gray", xlab="", ylab="LT99 Estimate (days)",
xlim=c(0.8,8.2), ylim=c(0,29), add=TRUE, sfrac=0.008)
plotCI(1:8, y=LTbb.logit[ordEst,1], ui=LTbb.logit[ordEst,3],
li=LTbb.logit[ordEst,2], lwd=2, col=col5[3], xaxt="n",
add=TRUE, sfrac=0.008)
plotCI(1:8+0.17, y=LTbbDisp1.cll[ordEst,1], ui=LTbbDisp1.cll[ordEst,3],
li=LTbbDisp1.cll[ordEst,2], lwd=2, col=col5[4], xaxt="n",
add=TRUE, sfrac=0.008)
plotCI(1:8+0.34, y=LTbin.cll[ordEst,1], ui=LTbin.cll[ordEst,3],
li=LTbin.cll[ordEst,2], lwd=2, col=col5[5], xaxt="n",
add=TRUE, sfrac=0.008)
axis(1, at=1:8, labels=gpNam[ordEst], las=2, lwd=0,
lwd.ticks=0.5, col.ticks="gray")
legend("topleft", legend=c("BB-cll (cll=cloglog)",  "BB-cll-ObsRE", "BB-logit",
"BB-cll, const Disp factor",
"Binomial-cll"),
inset=c(0.01,0.01), lty=c(1,1), col=col5[1:5],
text.col=col5[1:5], bty="n",y.intersp=0.85)
?glmer
knitr::opts_chunk$set(echo = FALSE, comment=NA, width=70)
options(show.signif.stars=FALSE)
suppressPackageStartupMessages(library(qra))
HawCon <- qra::HawCon
## Change name "CommonName" to "CN", for more compact output.
CCnum <- match("CommonName", names(HawCon))
names(HawCon)[CCnum] <- "CN"
## trtGp will identify species & lifestage combination
## trtGpRep will identify species, lifestage, and rep
## cTime is centered version of TrtTime
## scTime is centered and scaled version of TrtTime,
## needed to get some mixed model fits to converge
HawCon <- within(HawCon, {
trtGp <- factor(paste0(CN,LifestageTrt, sep=":"))
trtGpRep <- paste0(CN,LifestageTrt,":",RepNumber)
scTime <- scale(TrtTime)
obs <- factor(1:nrow(HawCon))
})
cap1 <- " Graphs are designed to give an indication of the pattern,
when mortalities are shown on a complementary log-log scale, of
mortality response with days in coolstorage."
library(ggplot2)
qra::graphSum(df=HawCon, link="cloglog", logScale=FALSE,
dead="Dead", tot="Total", dosevar="TrtTime",
Rep="RepNumber", fitRep=NULL, fitPanel=NULL,
byFacet=~trtGp, layout=LifestageTrt~Species,
xlab="Days", maint="Hawaian contemporary data")
if("VGAM" %in% (.packages()))
detach("package:VGAM", unload=TRUE)
# Load packages that will be used
suppressMessages(
{library(lme4); library(glmmTMB); library(splines);
library(DHARMa)})
form <- cbind(Dead,Live)~0+trtGp/TrtTime+(1|trtGpRep)
form2s <- cbind(Dead,Live)~0+trtGp/TrtTime+ns(scTime,2)+(1|trtGpRep)
HCbb.cll <- glmmTMB(form, dispformula=~trtGp+ns(scTime,2),
family=betabinomial(link="cloglog"), data=HawCon)
HCbb2s.cll <- update(HCbb.cll, formula=form2s)
HCbb.logit <- glmmTMB(form, dispformula=~trtGp+ns(TrtTime,2),
family=betabinomial(link="logit"),data=HawCon)
HCbb2s.logit <- update(HCbb.logit, formula=form2s)
cap7 <- "Differences are shown, between fitted degree 2 normal spline
curves and fittes lines.
Panel A is for the models that use a complementary log-log
(cloglog) link, while Panel B is for a logit link."
dim(data())
dim(data
)
dim(dat)
ls()
knitr::opts_chunk$set(echo = FALSE, comment=NA, width=70)
options(show.signif.stars=FALSE)
suppressPackageStartupMessages(library(qra))
HawCon <- qra::HawCon
## Change name "CommonName" to "CN", for more compact output.
CCnum <- match("CommonName", names(HawCon))
names(HawCon)[CCnum] <- "CN"
## trtGp will identify species & lifestage combination
## trtGpRep will identify species, lifestage, and rep
## cTime is centered version of TrtTime
## scTime is centered and scaled version of TrtTime,
## needed to get some mixed model fits to converge
HawCon <- within(HawCon, {
trtGp <- factor(paste0(CN,LifestageTrt, sep=":"))
trtGpRep <- paste0(CN,LifestageTrt,":",RepNumber)
scTime <- scale(TrtTime)
obs <- factor(1:nrow(HawCon))
})
cap1 <- " Graphs are designed to give an indication of the pattern,
when mortalities are shown on a complementary log-log scale, of
mortality response with days in coolstorage."
library(ggplot2)
qra::graphSum(df=HawCon, link="cloglog", logScale=FALSE,
dead="Dead", tot="Total", dosevar="TrtTime",
Rep="RepNumber", fitRep=NULL, fitPanel=NULL,
byFacet=~trtGp, layout=LifestageTrt~Species,
xlab="Days", maint="Hawaian contemporary data")
if("VGAM" %in% (.packages()))
detach("package:VGAM", unload=TRUE)
# Load packages that will be used
suppressMessages(
{library(lme4); library(glmmTMB); library(splines);
library(DHARMa)})
form <- cbind(Dead,Live)~0+trtGp/TrtTime+(1|trtGpRep)
form2s <- cbind(Dead,Live)~0+trtGp/TrtTime+ns(scTime,2)+(1|trtGpRep)
HCbb.cll <- glmmTMB(form, dispformula=~trtGp+ns(scTime,2),
family=betabinomial(link="cloglog"), data=HawCon)
HCbb2s.cll <- update(HCbb.cll, formula=form2s)
HCbb.logit <- glmmTMB(form, dispformula=~trtGp+ns(TrtTime,2),
family=betabinomial(link="logit"),data=HawCon)
HCbb2s.logit <- update(HCbb.logit, formula=form2s)
dim(HawCon)
dat$trtGpRep <- rep('new',nrow(dat))
dat <- expand.grid(trtGp=factor(levels(HawCon$trtGp), levels=levels(HawCon$trtGp)),
TrtTime=pretty(range(HawCon$TrtTime),15), link=c('cloglog','logit'))
dat$scTime <- scale(dat$TrtTime)
dat$trtGpRep <- rep('new',nrow(dat))
dim(dat)
library(qra)
table(HawCon$CNN)
table(HawCon$CN)
medfly <- subset(HawCon, CN='MedFly')
medFly <- within(medFly, {
trtGp <- LifestageTrt
scTime <- scale(TrtTime)
trtGpRep <- paste0(LifestageTrt,":",RepNumber)})
medfly <- within(medfly, {
trtGp <- LifestageTrt
scTime <- scale(TrtTime)
trtGpRep <- paste0(LifestageTrt,":",RepNumber)})
knitr::opts_chunk$set(echo = TRUE)
form <- cbind(Dead,Live)~0+trtGp/TrtTime+(scTime|trtGpRep)
medfly.cll <- glmmTMB::glmmTMB(form,
dispformula=~trtGp+splines::ns(scTime,2),
family=glmmTMB::betabinomial(link="cloglog"),
data=meffly)
medfly.cll <- glmmTMB::glmmTMB(form,
dispformula=~trtGp+splines::ns(scTime,2),
family=glmmTMB::betabinomial(link="cloglog"),
data=medfly)
table(HawCon$CN)
melonfly <- subset(HawCon, CN='MelonFly')
melonfly <- within(melonfly, {
trtGp <- LifestageTrt
scTime <- scale(TrtTime)
trtGpRep <- paste0(LifestageTrt,":",RepNumber)})
form <- cbind(Dead,Live)~0+trtGp/TrtTime+(scTime|trtGpRep)
melonfly.cll <- glmmTMB::glmmTMB(form,
dispformula=~trtGp+splines::ns(scTime,2),
family=glmmTMB::betabinomial(link="cloglog"),
data=melonfly)
ctl <- glmmTMBControl(optimizer=optim,
optArgs=list(method="BFGS"))
melonfly.cll <- glmmTMB::glmmTMB(form, control=ctl,
dispformula=~trtGp+splines::ns(scTime,2),
family=glmmTMB::betabinomial(link="cloglog"),
data=melonfly)
dim(melonfly)
melonfly <- subset(HawCon, CN=='MelonFly')
dim(melonfly)
melonfly <- within(melonfly, {
trtGp <- LifestageTrt
scTime <- scale(TrtTime)
trtGpRep <- paste0(LifestageTrt,":",RepNumber)})
form <- cbind(Dead,Live)~0+trtGp/TrtTime+(scTime|trtGpRep)
melonfly.cll <- glmmTMB::glmmTMB(form, control=ctl,
dispformula=~trtGp+splines::ns(scTime,2),
family=glmmTMB::betabinomial(link="cloglog"),
data=melonfly)
melonfly.cll <- glmmTMB::glmmTMB(form,
dispformula=~trtGp+splines::ns(scTime,2),
family=glmmTMB::betabinomial(link="cloglog"),
data=melonfly)
medfly <- subset(HawCon, CN=='MedFly')
medfly <- within(medfly, {
trtGp <- LifestageTrt
scTime <- scale(TrtTime)
trtGpRep <- paste0(LifestageTrt,":",RepNumber)})
form <- cbind(Dead,Live)~0+trtGp/TrtTime+(scTime|trtGpRep)
medfly.cll <- glmmTMB::glmmTMB(form,
dispformula=~trtGp+splines::ns(scTime,2),
family=glmmTMB::betabinomial(link="cloglog"),
data=medfly)
medfly.cll <- glmmTMB::glmmTMB(form, control=ctl,
dispformula=~trtGp+splines::ns(scTime,2),
family=glmmTMB::betabinomial(link="cloglog"),
data=medfly)
medfly <- subset(HawCon, CN=='MedFly'&LifeStage!='L2')
medfly <- subset(HawCon, CN=='MedFly'&LifeStageTrt!='L2')
names(medfly)
medfly <- subset(HawCon, CN=='MedFly'&LifestageTrt!='L2')
medfly <- within(medfly, {
trtGp <- LifestageTrt
scTime <- scale(TrtTime)
trtGpRep <- paste0(LifestageTrt,":",RepNumber)})
form <- cbind(Dead,Live)~0+trtGp/TrtTime+(scTime|trtGpRep)
medfly.cll <- glmmTMB::glmmTMB(form, control=ctl,
dispformula=~trtGp+splines::ns(scTime,2),
family=glmmTMB::betabinomial(link="cloglog"),
data=medfly)
medfly <- within(medfly, {
trtGp <- LifestageTrt
scTime <- scale(TrtTime)
trtGpRep <- paste0(LifestageTrt,":",RepNumber)})
form <- cbind(Dead,Live)~0+trtGp/TrtTime+(scTime|trtGpRep)
medfly.cll <- glmmTMB::glmmTMB(form,
dispformula=~trtGp+splines::ns(scTime,2),
family=glmmTMB::betabinomial(link="cloglog"),
data=medfly)
medfly <- within(medfly, {
trtGp <- LifestageTrt
obs <- factor(1:nrow(medfly))
scTime <- scale(TrtTime)
trtGpRep <- paste0(LifestageTrt,":",RepNumber)})
form <- cbind(Dead,Live)~0+trtGp/TrtTime+(1|obs)+(scTime|trtGpRep)
medfly.cll <- glmmTMB::glmmTMB(form,
family=glmmTMB::binomial(link="cloglog"),
data=medfly)
medfly.cll <- glmmTMB::glmmTMB(form,
family=binomial(link="cloglog"),
data=medfly)
medfly.cll <- glmmTMB::glmmTMB(form, control=ctl,
family=binomial(link="cloglog"),
data=medfly)
extractLT(medfly.cll, a=1:3, b=4:6)
extractLT(medfly.cll, a=1:3, b=4:6, p=0.9)
extractLT(medfly.cll, a=1:3, b=4:6, p=0.5)
?profile
prf <- profile(HCbb.cll, parm=1)
confint(prf)
diff(confint(prf))
diff(as.vector(confint(prf)))
coef(HCbb.cll)$cond
round(coef(HCbb.cll)$cond,2)
round(coef(HCbb.cll)$cond[1,],2)
round(coef(medfly.cll)$cond[1,],2)
names(medfly)
sapply(medfly[,c(3,12,13)],table)
coef(medfly.cll)$cond
names(coef(medfly.cll))
round(coef(summary(medfly.cll))$cond,2)
diff(as.vector(confint(prf)))
prf <- profile(HCbb.cll, parm='trtGpEgg:TrtTime')
dimnames(vcov(medfly.cll))
dimnames(vcov(medfly.cll,full=T))
rownames(vcov(medfly.cll,full=T))
prf <- profile(medfly.cll, parm=4)
round(coef(summary(medfly.cll))$cond,2)
prf <- profile(medfly.cll, parm=4)
prf <- profile(medfly.cll, parm='cond')
round(vcov(medfly.cll),4)
vcov(medfly.cll)
prf <- profile(medfly.cll, parm='trtGpEgg:TrtTime')
prf <- profile(medfly.cll, parm=2)
prf <- profile(medfly.cll, parm=1)
devtools::dontrun()
devtools::document()
library(qra)
summary(medfly.cll)$ngrps[['cond']]
summary(medfly.cll)$ngrps
system.time(extractLT(HCbb.cll, a=1:8, b=9:16))
ls()
awCon <- qra::HawCon
## Change name "CommonName" to "CN", for more compact output.
CCnum <- match("CommonName", names(HawCon))
names(HawCon)[CCnum] <- "CN"
## trtGp will identify species & lifestage combination
## trtGpRep will identify species, lifestage, and rep
## cTime is centered version of TrtTime
## scTime is centered and scaled version of TrtTime,
## needed to get some mixed model fits to converge
HawCon <- within(HawCon, {
trtGp <- factor(paste0(CN,LifestageTrt, sep=":"))
trtGpRep <- paste0(CN,LifestageTrt,":",RepNumber)
scTime <- scale(TrtTime)
obs <- factor(1:nrow(HawCon))
})
awCon <- qra::HawCon
## Change name "CommonName" to "CN", for more compact output.
CCnum <- match("CommonName", names(HawCon))
names(HawCon)[CCnum] <- "CN"
## trtGp will identify species & lifestage combination
## trtGpRep will identify species, lifestage, and rep
## cTime is centered version of TrtTime
## scTime is centered and scaled version of TrtTime,
## needed to get some mixed model fits to converge
HawCon <- within(HawCon, {
trtGp <- factor(paste0(CN,LifestageTrt, sep=":"))
trtGpRep <- paste0(CN,LifestageTrt,":",RepNumber)
scTime <- scale(TrtTime)
obs <- factor(1:nrow(HawCon))
})
names(summary(HCbb.cll))
form <- cbind(Dead,Live)~0+trtGp/TrtTime+(1|trtGpRep)
form2s <- cbind(Dead,Live)~0+trtGp/TrtTime+ns(scTime,2)+(1|trtGpRep)
HCbb.cll <- glmmTMB(form, dispformula=~trtGp+ns(scTime,2),
family=betabinomial(link="cloglog"), data=HawCon)
library(glmmTMB)
form <- cbind(Dead,Live)~0+trtGp/TrtTime+(1|trtGpRep)
form2s <- cbind(Dead,Live)~0+trtGp/TrtTime+ns(scTime,2)+(1|trtGpRep)
HCbb.cll <- glmmTMB(form, dispformula=~trtGp+ns(scTime,2),
family=betabinomial(link="cloglog"), data=HawCon)
form <- cbind(Dead,Live)~0+trtGp/TrtTime+(1|trtGpRep)
form2s <- cbind(Dead,Live)~0+trtGp/TrtTime+ns(scTime,2)+(1|trtGpRep)
HCbb.cll <- glmmTMB(form, dispformula=~trtGp+splines::ns(scTime,2),
family=betabinomial(link="cloglog"), data=HawCon)
names(summary(HCbb.cll))
summary(HCbb.cll)$ngrps
knitr::opts_chunk$set(echo = FALSE, comment=NA, width=70)
options(show.signif.stars=FALSE)
ctl <- glmmTMBControl(optimizer=optim,
optArgs=list(method="BFGS"))
HCbiObs.cll <-
glmmTMB(cbind(Dead, Live) ~ 0 + trtGp/scTime +
(1|obs) + (scTime|trtGpRep),
family=binomial(link='cloglog'),
control=ctl, data=HawCon)
summary(HCbiObs.cll)$ngrps
?plotResiduals
?DHARMa::plotResiduals
library(qra)
redDel <- subset(qra::codling1988, Cultivar=="Red Delicious")
redDel.glm <- glm(cbind(dead,total-dead)~ct, data=redDel,
family=quasibinomial(link='cloglog'))
vv <- summary(redDel.glm)$cov.scaled
fieller(0.99, b=coef(redDel.glm), vv=vv, link='cloglog')
?lmerTest::lmer
citation('pbkrtest')
library(qra)
