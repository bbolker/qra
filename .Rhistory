df.t=rep(16,4),
labels=c("Linear mixed model (rlmer)",
"glmer, uncorrected wts",
"glmer, corrected weights",
"GLM: Corr weights")){
blmm <- coef(summary(obj[[1]]))[ab]
vlmm <- vcov(obj[[1]])[ab,ab]
bgmm <- coef(summary(obj[[2]]))[ab]
vgmm <- vcov(obj[[2]])[ab,ab]
bgmmW <- coef(summary(obj[[3]]))[ab]
vgmmW <- vcov(obj[[3]])[ab,ab]
bglmAdj <- coef(summary(obj[[4]]))[ab]
vglmAdj <- vcov(obj[[4]])[ab,ab]
ests99 <- rbind(
qra::fieller(0.99, blmm,vlmm, df.t=16, offset=ascale)[1:4],
qra::fieller(0.99, bgmm,vgmm, df.t=16, offset=abscale)[1:4],
qra::fieller(0.99, bgmmW,vgmmW, df.t=16, offset=abscale)[1:4],
qra::fieller(0.99, bglmAdj,vglmAdj, df.t=16, offset=ascale)[1:4])
row.names(ests99) <- labels
ests99
}
extractLT()
```{r extractLT}
HawCon <- qra::HawCon
## Change name "CommonName" to "CN", for more compact output.
CCnum <- match("CommonName", names(HawCon))
names(HawCon)[CCnum] <- "CN"
HawCon[['CN']] <- plyr::revalue(HawCon[['CN']],
c("Mediterranean fruit fly"="MedFly",
"Melon fly"="MelonFly"))
## trtGp will identify species & lifestage combination
## trtGpRep will identify species, lifestage, and rep
## cTime is centered version of TrtTime
## scTime is centered and scaled version of TrtTime,
## needed to get some mixed model fits to converge
HawCon <- within(HawCon, {
trtGp <- paste0(CN,LifestageTrt, sep=":")
trtGpRep <- paste0(CN,LifestageTrt,RepNumber)
cTime <- scale(TrtTime, scale=FALSE)
scTime <- scale(TrtTime)
logitp = log((Dead+1/6)/(Live+1/6))
})
pointLab <- 1:nrow(HawCon)
knitr::opts_chunk$set(echo = FALSE, comment=NA)
options(show.signif.stars=FALSE)
library(qra)
HawCon <- qra::HawCon
## Change name "CommonName" to "CN", for more compact output.
CCnum <- match("CommonName", names(HawCon))
names(HawCon)[CCnum] <- "CN"
HawCon[['CN']] <- plyr::revalue(HawCon[['CN']],
c("Mediterranean fruit fly"="MedFly",
"Melon fly"="MelonFly"))
## trtGp will identify species & lifestage combination
## trtGpRep will identify species, lifestage, and rep
## cTime is centered version of TrtTime
## scTime is centered and scaled version of TrtTime,
## needed to get some mixed model fits to converge
HawCon <- within(HawCon, {
trtGp <- paste0(CN,LifestageTrt, sep=":")
trtGpRep <- paste0(CN,LifestageTrt,RepNumber)
cTime <- scale(TrtTime, scale=FALSE)
scTime <- scale(TrtTime)
logitp = log((Dead+1/6)/(Live+1/6))
})
pointLab <- 1:nrow(HawCon)
library(ggplot2)
graphSum(df=HawCon, link="logit", logScale=FALSE,
dead="Dead", tot="Total", dosevar="TrtTime", Rep="RepNumber",
fitRep=NULL, fitPanel=NULL,
byFacet=~trtGp, layout=LifestageTrt~Species,
maint="Hawaian contemporary data",
xlab="Days")
tab <- sapply(split(HawCon,HawCon$trtGpRep),function(x)sum(x$Dead<x$Total))
dayMin <- rep(2,nrow(HawCon))
for(gp in names(tab)){
selRows <- with(HawCon, trtGpRep==gp)
if(tab[gp]>=5)dayMin[selRows] <- 4
if(tab[gp]>=7)dayMin[selRows] <- 6
}
par(mfrow=c(1,3))
## Fit one line for each unique trtGp
## Fit one line for each unique trtGpRep
modX.glm <- glm(cbind(Dead,Live)~0+trtGp/cTime,
family=quasibinomial(link='logit'), data=HawCon)
keep <- with(HawCon, TrtTime>=dayMin)
modXRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/cTime,
family=quasibinomial(link='logit'), data=subset(HawCon, TrtTime>=dayMin))
## Check residual plots
plot(modXRep.glm, which=1:3, pty="s", sub.caption="", lwd=3, cex.lab=1.45,
labels.id=pointLab[keep], cex.caption=1.25)
par(mfrow=c(1,1))
par(mfrow=c(1,3))
p <- fitted(modXRep.glm)
pz <- asin(sqrt(p))/asin(1)
pz <- p
disp <- summary(modXRep.glm)$dispersion
priorWts <- pz^(-0)*(1-pz)^(-0.25)
keep <- with(HawCon, TrtTime>=dayMin)
modXWRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/cTime,
family=quasibinomial(link='logit'),
data=subset(HawCon, keep),
weights=priorWts)
plot(modXWRep.glm, which=1:3, pty="s", sub.caption="", lwd=3, cex.lab=1.45,
panel=function(x,y,...)panel.smooth(x,y,span=0.8,...),
cex.caption=1.25, labels.id = pointLab[keep])
par(mfrow=c(1,3))
keepGLM <- with(HawCon, TrtTime>=dayMin&!pointLab%in%c(52))
modXRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/cTime,
family=quasibinomial(link='logit'),
data=subset(HawCon, keepGLM))
p <- fitted(modXRep.glm)
pz <- asin(sqrt(p))/asin(1)
pz <- p
disp <- summary(modXRep.glm)$dispersion
priorWts <- (1-pz)^(-0.25)/disp
modXWRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/cTime,
family=quasibinomial(link='logit'),
data=subset(HawCon, keepGLM),
weights=priorWts)
plot(modXWRep.glm, which=1:3, pty="s", sub.caption="", lwd=3,
cex.lab=1.45,
panel=function(x,y,...)panel.smooth(x,y,span=0.8,...),
cex.caption=1.25, labels.id = pointLab[keepGLM])
modXW.glm <- glm(cbind(Dead,Live)~0+trtGp/cTime,
family=quasibinomial(link='logit'),
data=subset(HawCon, keepGLM),
weights=priorWts)
par(mfrow=c(1,3))
keep <- with(HawCon, TrtTime>=dayMin)
modXRep.rlm <- MASS::rlm(log((Dead+1/6)/(Live+1/6))~
0+trtGpRep/cTime, maxit=80,
subset(HawCon,TrtTime>=dayMin))
plot(modXRep.rlm, which=1:3, sub.caption="", id.n=4,
labels.id=pointLab[keep])
par(mfrow=c(1,3))
keepLM <- with(HawCon,
TrtTime>=dayMin & !pointLab%in%c(50,54,55,89))
modXRep.rlm <- MASS::rlm(log((Dead+1/6)/(Live+1/6))~
0+trtGpRep/cTime,
subset(HawCon, keepLM))
plot(modXRep.rlm, which=1:3, sub.caption="",
labels.id=pointLab[keepLM])
library(robustlmm, quietly=TRUE)
HawCon <- as.data.frame(HawCon)
keep <- with(HawCon, TrtTime>=dayMin)
# modAdd.rlmer <- rlmer(log((Dead+1/6)/(Live+1/6))~
#                        0+trtGp+cTime+(1|trtGpRep),
#                   data=subset(HawCon, keep))
modX.rlmer <- rlmer(log((Dead+1/6)/(Live+1/6))~
0+trtGp/cTime+(1|trtGpRep),
data=subset(HawCon, keep))
plot(modX.rlmer, ask=FALSE)
formX <- cbind(Dead,Live)~ 0+trtGp/scTime+(scTime|trtGpRep)
modX.glmer <- glmer(formX, nAGQ=0, data=subset(HawCon, keepGLM),
family=binomial(link='logit'))
modXW.glmer <- glmer(formX, nAGQ=0, data=subset(HawCon, keepGLM),
weights=priorWts, family=binomial(link='logit'))
par(mfrow=c(1,3))
## Fit one line for each unique trtGp
## Fit one line for each unique trtGpRep
modX.glm <- glm(cbind(Dead,Live)~0+trtGp/cTime,
family=quasibinomial(link='logit'), data=HawCon)
keep <- with(HawCon, TrtTime>=dayMin)
modXRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/cTime,
family=quasibinomial(link='logit'), data=subset(HawCon, TrtTime>=dayMin))
## Check residual plots
plot(modXRep.glm, which=1:3, pty="s", sub.caption="", lwd=3, cex.lab=1.45,
labels.id=pointLab[keep], cex.caption=1.25)
par(mfrow=c(1,1))
par(mfrow=c(1,3))
p <- fitted(modXRep.glm)
pz <- asin(sqrt(p))/asin(1)
pz <- p
disp <- summary(modXRep.glm)$dispersion
priorWts <- pz^(-0)*(1-pz)^(-0.25)
keep <- with(HawCon, TrtTime>=dayMin)
modXWRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/cTime,
family=quasibinomial(link='logit'),
data=subset(HawCon, keep),
weights=priorWts)
plot(modXWRep.glm, which=1:3, pty="s", sub.caption="", lwd=3, cex.lab=1.45,
panel=function(x,y,...)panel.smooth(x,y,span=0.8,...),
cex.caption=1.25, labels.id = pointLab[keep])
par(mfrow=c(1,3))
keepGLM <- with(HawCon, TrtTime>=dayMin&!pointLab%in%c(52))
modXRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/cTime,
family=quasibinomial(link='logit'),
data=subset(HawCon, keepGLM))
p <- fitted(modXRep.glm)
pz <- asin(sqrt(p))/asin(1)
pz <- p
disp <- summary(modXRep.glm)$dispersion
priorWts <- (1-pz)^(-0.25)/disp
modXWRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/cTime,
family=quasibinomial(link='logit'),
data=subset(HawCon, keepGLM),
weights=priorWts)
plot(modXWRep.glm, which=1:3, pty="s", sub.caption="", lwd=3,
cex.lab=1.45,
panel=function(x,y,...)panel.smooth(x,y,span=0.8,...),
cex.caption=1.25, labels.id = pointLab[keepGLM])
modXW.glm <- glm(cbind(Dead,Live)~0+trtGp/cTime,
family=quasibinomial(link='logit'),
data=subset(HawCon, keepGLM),
weights=priorWts)
par(mfrow=c(1,3))
keep <- with(HawCon, TrtTime>=dayMin)
modXRep.rlm <- MASS::rlm(log((Dead+1/6)/(Live+1/6))~
0+trtGpRep/cTime, maxit=80,
subset(HawCon,TrtTime>=dayMin))
plot(modXRep.rlm, which=1:3, sub.caption="", id.n=4,
labels.id=pointLab[keep])
par(mfrow=c(1,3))
keepLM <- with(HawCon,
TrtTime>=dayMin & !pointLab%in%c(50,54,55,89))
modXRep.rlm <- MASS::rlm(log((Dead+1/6)/(Live+1/6))~
0+trtGpRep/cTime,
subset(HawCon, keepLM))
plot(modXRep.rlm, which=1:3, sub.caption="",
labels.id=pointLab[keepLM])
library(robustlmm, quietly=TRUE)
HawCon <- as.data.frame(HawCon)
keep <- with(HawCon, TrtTime>=dayMin)
# modAdd.rlmer <- rlmer(log((Dead+1/6)/(Live+1/6))~
#                        0+trtGp+cTime+(1|trtGpRep),
#                   data=subset(HawCon, keep))
modX.rlmer <- rlmer(log((Dead+1/6)/(Live+1/6))~
0+trtGp/cTime+(1|trtGpRep),
data=subset(HawCon, keep))
ascale <- qra::getScaleCoef(HawCon$cTime)
abscale <- qra::getScaleCoef(HawCon$scTime)
extractLT <- function(p=0.99, ab=c(1,9), obj=list(modX.rlmer, modX.glmer,
modXW.glmer, modXW.glm),
scaling=list(ascale,abscale,abscale,ascale),
df.t=rep(16,4),
labels=c("Linear mixed model (rlmer)",
"glmer, uncorrected wts",
"glmer, corrected weights",
"GLM: Corr weights")){
blmm <- coef(summary(obj[[1]]))[ab]
vlmm <- vcov(obj[[1]])[ab,ab]
bgmm <- coef(summary(obj[[2]]))[ab]
vgmm <- vcov(obj[[2]])[ab,ab]
bgmmW <- coef(summary(obj[[3]]))[ab]
vgmmW <- vcov(obj[[3]])[ab,ab]
bglmAdj <- coef(summary(obj[[4]]))[ab]
vglmAdj <- vcov(obj[[4]])[ab,ab]
ests99 <- rbind(
qra::fieller(0.99, blmm,vlmm, df.t=16, offset=ascale)[1:4],
qra::fieller(0.99, bgmm,vgmm, df.t=16, offset=abscale)[1:4],
qra::fieller(0.99, bgmmW,vgmmW, df.t=16, offset=abscale)[1:4],
qra::fieller(0.99, bglmAdj,vglmAdj, df.t=16, offset=ascale)[1:4])
row.names(ests99) <- labels
ests99
}
ascale <- qra::getScaleCoef(HawCon$cTime)
abscale <- qra::getScaleCoef(HawCon$scTime)
knitr::opts_chunk$set(echo = FALSE, comment=NA)
options(show.signif.stars=FALSE)
library(qra)
HawCon <- qra::HawCon
## Change name "CommonName" to "CN", for more compact output.
CCnum <- match("CommonName", names(HawCon))
names(HawCon)[CCnum] <- "CN"
HawCon[['CN']] <- plyr::revalue(HawCon[['CN']],
c("Mediterranean fruit fly"="MedFly",
"Melon fly"="MelonFly"))
## trtGp will identify species & lifestage combination
## trtGpRep will identify species, lifestage, and rep
## cTime is centered version of TrtTime
## scTime is centered and scaled version of TrtTime,
## needed to get some mixed model fits to converge
HawCon <- within(HawCon, {
trtGp <- paste0(CN,LifestageTrt, sep=":")
trtGpRep <- paste0(CN,LifestageTrt,RepNumber)
cTime <- scale(TrtTime, scale=FALSE)
scTime <- scale(TrtTime)
logitp = log((Dead+1/6)/(Live+1/6))
})
pointLab <- 1:nrow(HawCon)
library(ggplot2)
graphSum(df=HawCon, link="logit", logScale=FALSE,
dead="Dead", tot="Total", dosevar="TrtTime", Rep="RepNumber",
fitRep=NULL, fitPanel=NULL,
byFacet=~trtGp, layout=LifestageTrt~Species,
maint="Hawaian contemporary data",
xlab="Days")
tab <- sapply(split(HawCon,HawCon$trtGpRep),function(x)sum(x$Dead<x$Total))
dayMin <- rep(2,nrow(HawCon))
for(gp in names(tab)){
selRows <- with(HawCon, trtGpRep==gp)
if(tab[gp]>=5)dayMin[selRows] <- 4
if(tab[gp]>=7)dayMin[selRows] <- 6
}
par(mfrow=c(1,3))
## Fit one line for each unique trtGp
## Fit one line for each unique trtGpRep
modX.glm <- glm(cbind(Dead,Live)~0+trtGp/cTime,
family=quasibinomial(link='logit'), data=HawCon)
keep <- with(HawCon, TrtTime>=dayMin)
modXRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/cTime,
family=quasibinomial(link='logit'), data=subset(HawCon, TrtTime>=dayMin))
## Check residual plots
plot(modXRep.glm, which=1:3, pty="s", sub.caption="", lwd=3, cex.lab=1.45,
labels.id=pointLab[keep], cex.caption=1.25)
par(mfrow=c(1,1))
par(mfrow=c(1,3))
p <- fitted(modXRep.glm)
pz <- asin(sqrt(p))/asin(1)
pz <- p
disp <- summary(modXRep.glm)$dispersion
priorWts <- pz^(-0)*(1-pz)^(-0.25)
keep <- with(HawCon, TrtTime>=dayMin)
modXWRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/cTime,
family=quasibinomial(link='logit'),
data=subset(HawCon, keep),
weights=priorWts)
plot(modXWRep.glm, which=1:3, pty="s", sub.caption="", lwd=3, cex.lab=1.45,
panel=function(x,y,...)panel.smooth(x,y,span=0.8,...),
cex.caption=1.25, labels.id = pointLab[keep])
par(mfrow=c(1,3))
keepGLM <- with(HawCon, TrtTime>=dayMin&!pointLab%in%c(52))
modXRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/cTime,
family=quasibinomial(link='logit'),
data=subset(HawCon, keepGLM))
p <- fitted(modXRep.glm)
pz <- asin(sqrt(p))/asin(1)
pz <- p
disp <- summary(modXRep.glm)$dispersion
priorWts <- (1-pz)^(-0.25)/disp
modXWRep.glm <- glm(cbind(Dead,Live)~0+trtGpRep/cTime,
family=quasibinomial(link='logit'),
data=subset(HawCon, keepGLM),
weights=priorWts)
plot(modXWRep.glm, which=1:3, pty="s", sub.caption="", lwd=3,
cex.lab=1.45,
panel=function(x,y,...)panel.smooth(x,y,span=0.8,...),
cex.caption=1.25, labels.id = pointLab[keepGLM])
modXW.glm <- glm(cbind(Dead,Live)~0+trtGp/cTime,
family=quasibinomial(link='logit'),
data=subset(HawCon, keepGLM),
weights=priorWts)
par(mfrow=c(1,3))
keep <- with(HawCon, TrtTime>=dayMin)
modXRep.rlm <- MASS::rlm(log((Dead+1/6)/(Live+1/6))~
0+trtGpRep/cTime, maxit=80,
subset(HawCon,TrtTime>=dayMin))
plot(modXRep.rlm, which=1:3, sub.caption="", id.n=4,
labels.id=pointLab[keep])
par(mfrow=c(1,3))
keepLM <- with(HawCon,
TrtTime>=dayMin & !pointLab%in%c(50,54,55,89))
modXRep.rlm <- MASS::rlm(log((Dead+1/6)/(Live+1/6))~
0+trtGpRep/cTime,
subset(HawCon, keepLM))
plot(modXRep.rlm, which=1:3, sub.caption="",
labels.id=pointLab[keepLM])
library(robustlmm, quietly=TRUE)
HawCon <- as.data.frame(HawCon)
keep <- with(HawCon, TrtTime>=dayMin)
# modAdd.rlmer <- rlmer(log((Dead+1/6)/(Live+1/6))~
#                        0+trtGp+cTime+(1|trtGpRep),
#                   data=subset(HawCon, keep))
modX.rlmer <- rlmer(log((Dead+1/6)/(Live+1/6))~
0+trtGp/cTime+(1|trtGpRep),
data=subset(HawCon, keep))
plot(modX.rlmer, ask=FALSE)
formX <- cbind(Dead,Live)~ 0+trtGp/scTime+(scTime|trtGpRep)
modX.glmer <- glmer(formX, nAGQ=0, data=subset(HawCon, keepGLM),
family=binomial(link='logit'))
modXW.glmer <- glmer(formX, nAGQ=0, data=subset(HawCon, keepGLM),
weights=priorWts, family=binomial(link='logit'))
knitr::opts_chunk$set(echo = FALSE, comment=NA)
options(show.signif.stars=FALSE)
library(qra)
HawCon <- qra::HawCon
## Change name "CommonName" to "CN", for more compact output.
CCnum <- match("CommonName", names(HawCon))
names(HawCon)[CCnum] <- "CN"
HawCon[['CN']] <- plyr::revalue(HawCon[['CN']],
c("Mediterranean fruit fly"="MedFly",
"Melon fly"="MelonFly"))
## trtGp will identify species & lifestage combination
## trtGpRep will identify species, lifestage, and rep
## cTime is centered version of TrtTime
## scTime is centered and scaled version of TrtTime,
## needed to get some mixed model fits to converge
HawCon <- within(HawCon, {
trtGp <- paste0(CN,LifestageTrt, sep=":")
trtGpRep <- paste0(CN,LifestageTrt,RepNumber)
cTime <- scale(TrtTime, scale=FALSE)
scTime <- scale(TrtTime)
logitp = log((Dead+1/6)/(Live+1/6))
})
pointLab <- 1:nrow(HawCon)
library(ggplot2)
graphSum(df=HawCon, link="logit", logScale=FALSE,
dead="Dead", tot="Total", dosevar="TrtTime", Rep="RepNumber",
fitRep=NULL, fitPanel=NULL,
byFacet=~trtGp, layout=LifestageTrt~Species,
maint="Hawaian contemporary data",
xlab="Days")
tab <- sapply(split(HawCon,HawCon$trtGpRep),function(x)sum(x$Dead<x$Total))
dayMin <- rep(2,nrow(HawCon))
for(gp in names(tab)){
selRows <- with(HawCon, trtGpRep==gp)
if(tab[gp]>=5)dayMin[selRows] <- 4
if(tab[gp]>=7)dayMin[selRows] <- 6
}
extractLT()
ascale <- qra::getScaleCoef(HawCon$cTime)
abscale <- qra::getScaleCoef(HawCon$scTime)
blm1 <- coef(summary(modX.rlmer))[c(1,9)]
vlm1 <- vcov(modX.rlmer)[c(1,9),c(1,9)]
blm2 <- coef(summary(modX.rlmer))[c(2,10)]
vlm2 <- vcov(modX.rlmer)[c(2,10),c(2,10)]
b1 <- coef(summary(modX.glmer))[c(1,9)]
v1 <- vcov(modX.glmer)[c(1,9),c(1,9)]
b2 <- coef(summary(modX.glmer))[c(2,10)]
v2 <- vcov(modX.glmer)[c(2,10),c(2,10)]
bW1 <- coef(summary(modXW.glmer))[c(1,9)]
vW1 <- vcov(modXW.glmer)[c(1,9),c(1,9)]
bW2 <- coef(summary(modXW.glmer))[c(2,10)]
vW2 <- vcov(modXW.glmer)[c(1,9),c(2,10)]
bglmAdj1 <- coef(summary(modXW.glm))[c(1,9)]
vglmAdj1 <- vcov(modXW.glm)[c(1,9),c(1,9)]
bglmAdj2 <- coef(summary(modXW.glm))[c(2,10)]
vglmAdj2 <- vcov(modXW.glm)[c(2,10),c(2,10)]
ests99 <- rbind(
qra::fieller(0.99, blm1,vlm1, df.t=16, offset=ascale)[1:4],
qra::fieller(0.99, b1,v1, df.t=16, offset=abscale)[1:4],
qra::fieller(0.99, bW1,vW1, df.t=16, offset=abscale)[1:4],
qra::fieller(0.99, bglmAdj1,vglmAdj1, df.t=16, offset=ascale)[1:4])
row.names(ests99) <- c("Linear mixed model (rlmer)", "glmer, uncorrected wts",
"glmer, corrected weights", "GLM: Corr weights")
colnames(ests99)[1] <- "LT99"
print(ests99, digits=3)
trtGp
coef(summary(modX.rlmer))[1]
coef(summary(modX.rlmer))[c(1,9)]
coef(fixef(modX.rlmer))[c(1,9)]
fixef(modX.rlmer)[c(1,9)]
fixef(modX.rlmer)[c(1)]
extractLT()
substring(names(fixef(modX.rlmer)),6)
gpNam <- substring(names(fixef(modX.rlmer))[1:8],6)
for(i in 1:8){
cat(gpNam,"\n")
ests99 <- extractLT(ab=c(i,i+8))
print(ests99,digits=3)
}
for(i in 1:8){
cat(gpNam[i],"\n")
ests99 <- extractLT(ab=c(i,i+8))
print(ests99,digits=3)
}
gpNam <- substring(names(fixef(modX.rlmer))[1:8],6)
for(i in 1:8){
cat(gpNam[i],"\n")
ests99 <- extractLT(ab=c(i,i+8))
print(ests99,digits=3)
cat("\n")
}
devtools::document()
library(qra)
knitr::opts_chunk$set(echo = FALSE, comment=NA)
options(show.signif.stars=FALSE)
library(qra)
modX.rlmer <- rlmer(log((Dead+1/6)/(Live+1/6))~
0+trtGp/cTime+(1|trtGpRep),
data=subset(HawCon, keep))
search()
detach(4)
plot(modX.rlmer, ask=FALSE)
library(qra)
detach(4)
plot(modX.rlmer, ask=FALSE,which=3)
robustlmm::plot(modX.rlmer, ask=FALSE,which=3)
library(robustlmm)
plot(modX.rlmer, ask=FALSE,which=3)
search()
detach(2)
knitr::opts_chunk$set(echo = FALSE, comment=NA)
options(show.signif.stars=FALSE)
library(qra)
modX.rlmer <- robustlmm::rlmer(log((Dead+1/6)/(Live+1/6))~
0+trtGp/cTime+(1|trtGpRep),
data=subset(HawCon, keep))
plot(modX.rlmer, ask=FALSE,which=3)
devtools::document()
library(qra)
devtools::document()
library(qra)
devtools::document()
library(qra)
install.packages("~/pkgs/qra_0.1.16.tar.gz", repos = NULL, type = "source")
search()
detach(2)
install.packages("robustlmm")
install.packages("~/pkgs/qra_0.1.16.tar.gz", repos = NULL, type = "source")
install.packages(c("knitr", "lme4", "car"))
install.packages("~/packages/DAAG_1.24.tar.gz", repos = NULL, type = "source")
install.packages(c("leaps", "oz", "quantreg", "randomForest"))
install.packages("~/packages/DAAG_1.24.tar.gz", repos = NULL, type = "source")
install.packages("latticeExtra")
install.packages("~/packages/DAAG_1.24.tar.gz", repos = NULL, type = "source")
.libPaths
.libPaths()
.Library
update.packages(checkBuilt=TRUE)
update.packages(checkBuilt=TRUE, ask=F)
